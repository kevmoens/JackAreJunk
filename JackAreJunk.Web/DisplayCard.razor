<style>
    .card {
        max-width: 100%;
        max-height: 100%;
    }
</style>
<button style="width: 100%; height: 100%;" disabled=@(IsCardEnabled()) @onclick="OnCardClicked">
    @if (Card is JackAreJunk.ICardPlayable && ((JackAreJunk.ICardPlayable)Card).IsShown)
    {
        <img class="card" src="@GetCardImagePath()"/>
    }
    else
    {
        <div>Hidden</div>
    }
</button>
@code {
    [Parameter]
    public JackAreJunk.ICard Card { get; set; }

    [Parameter]
    public EventCallback<JackAreJunk.ICard> CardChanged { get; set; }

    [Parameter]
    public JackAreJunk.Game Game { get; set; }

    [Parameter]
    public EventCallback<JackAreJunk.Game> GameChanged { get; set; }

    [Parameter]
    public JackAreJunk.Player Player { get; set; }

    [Parameter]
    public EventCallback<JackAreJunk.Player> PlayerChanged { get; set; }

    [Parameter]
    public int CardPos { get; set; }

    [Parameter]
    public EventCallback<int> CardPosChanged { get; set; }
    private bool IsJustMatched;
    public DisplayCard()
    {
        PubSub.Hub.Default.Subscribe<GameTurnCardMatchPubSubMessage>(new Func<GameTurnCardMatchPubSubMessage, Task>(e =>
        {
            return OnCardMatch(e);
        }));
    }
    public void OnCardClicked()
    {
        if (Game == null || Game.CurrentTurn == null || IsJustMatched) return;
        Game.CurrentTurn.WaitForCard.SetResult(Card);
    }

    public bool IsCardEnabled()
    {
        if (IsJustMatched) return false;
        //todo check card pos if wild card to enable, etc...
        if (Game.CurrentTurn?.CurrentCard == null)
        {
            return true;
        }
        if (Game.Players[Game.CurrentPlayerTurn] != Player)
        {
            return true;
        }
        if (Card is ICardPlayable)
        {
            if (!((ICardPlayable)Card).IsShown)
            {
                return false;
            }
        }
        switch(Card.Rank)
        {
            case Rank.C01:
                return CardPos == 0;
            case Rank.C02:
                return CardPos == 1;
            case Rank.C03:
                return CardPos == 2;
            case Rank.C04:
                return CardPos == 3;
            case Rank.C05:
                return CardPos == 4;
            case Rank.C06:
                return CardPos == 5;
            case Rank.C07:
                return CardPos == 6;
            case Rank.C08:
                return CardPos == 7;
            case Rank.C09:
                return CardPos == 8;
            case Rank.C10:
                return CardPos == 9;
        }
        return false;
    }
    public async Task OnCardMatch(GameTurnCardMatchPubSubMessage msg)
    {
        StateHasChanged();
        if (msg.Card == Card)
        {
            Console.WriteLine($"OnCardMatch {msg.Card}");
            IsJustMatched = true;
            StateHasChanged();
            await Task.Delay(3000);
            IsJustMatched = false;
            StateHasChanged();
        }
    }
    public string GetCardImagePath()
    {
        string path = "/images/";
        if (Card.IsJoker)
        {
            if (Card.IsRed)
            {
                return $"{path}red_joker.png";
            }
            return $"{path}black_joker.png";
        }
        switch (Card.Rank)
        {
            case (Rank.C01):
                path += "ace";
                break;
            case (Rank.Jack):
                path += "jack";
                break;
            case (Rank.Queen):
                path += "queen";
                break;
            case (Rank.King):
                path += "king";
                break;
            default:
                path += Card.Rank.ToString().TrimStart('C','0');
                break;
        }
        path += "_of_";
        path += Card.Suit.ToString().ToLower();
        path += ".png";
        return path;
    }
}
