@page "/"
@page "/Game"
@using PubSub;
@inject Game game;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
<style>
    .MainLayout {
        display: flex;
        width: 100%;
        height: 100%;
    }

    .PlayerCards {
        display: inline;
        flex: 9;
        width: 100%;
        height: 100%;
    }

    .PlayerName {
        display: inline;
    }

    .DiscardPile {
        display: flex;
        flex: 1;
        flex-direction: column;
        width: 100%;
        height: 100%;
    }

    .GameButton {
        height: 150px;
        width: 100px;
    }
</style>
<div class="MainLayout">
    <div class="PlayerCards">
        @foreach (JackAreJunk.Player player in game.Players)
        {
            JackAreJunk.Player p = player;
            <h1>
                @player.Name
                @if (player == game.Players[game.CurrentPlayerTurn])
                {
                    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">
                        <path color="#0000FF" fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z" />
                    </svg>
                }
            </h1>

            <PlayerCards @bind-Player="p" @bind-Game="game" />
        }
    </div>
    <div class="DiscardPile">
        <div class="Pile">
            <button class="GameButton" @onclick="OnPile" disabled=@PileDiscardDisabled>Pile</button>
        </div>
        <div class="Discard">
            <DiscardCard Game="@game" Card="@game.LastDiscardedCard" IsDisabled="@PileDiscardDisabled" CardClicked="@OnDiscard" />
        </div>
        <div class="Discard">
            @if (CurrentCard != null)
            {
                @CurrentCard
            }
        </div>
    </div>
</div>
@if (game == null || game.Players == null || game.Players.Count == 0 || game.IsGameOver)
{
    <input type="button" class="GameButton" @onclick="StartGame" value="Start Game" />
}
@if (game != null && game.Players != null && game.Players.Count > 0 && !game.IsGameOver)
{
    <input type="button" class="GameButton" @onclick="StartRound" value="Play Round" />
}

@code {
    Hub hub = Hub.Default;
    ICard CurrentCard;
    bool PileDiscardDisabled = true;

    protected override void OnInitialized()
    {
        //game.Initialize();
        hub.Subscribe<PlayerEntryPubSubMessage>(OnPlayerEntry);
        hub.Subscribe<GameTurnCardPubSubMessage>(OnGameTurnCard);
        hub.Subscribe<GameDisplayWinnerPubSubMessage>(OnGameDisplayWinner);
        hub.Subscribe<GameTurnRefreshUIMessage>(OnRefreshUI);
    }
    public async void StartGame()
    {
        try
        {
            await game.Initialize();
            game.Deck = new Deck();
            Console.WriteLine("Initialize Before Deal");
            game.Deal();
            Console.WriteLine("Initialize Before PlayRound");
            await game.PlayRound();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        StateHasChanged();
    }
    public async void StartRound()
    {
        await game.Play();
        StateHasChanged();
    }
    public void OnPile()
    {
        if (game.CurrentTurn == null) return;
        PileDiscardDisabled = true;
        game.CurrentTurn.WaitForCard.SetResult(game.Deck.Cards[0]);
        game.Deck.Cards.RemoveAt(0);
    }
    public void OnDiscard()
    {
        PileDiscardDisabled = true;
        StateHasChanged();
    }
    public void OnPlayerEntry(PlayerEntryPubSubMessage message)
    {
        NavigationManager.NavigateTo("PlayerEntry");
    }
    public Task OnGameTurnCard(GameTurnCardPubSubMessage turnCard)
    {
        if (turnCard == null)
        {
            PileDiscardDisabled = true;
            CurrentCard = null;
            StateHasChanged();
            return Task.CompletedTask;
        }

        CurrentCard = turnCard.Card;
        PileDiscardDisabled = CurrentCard != null;

        StateHasChanged();
        return Task.CompletedTask;
    }
    public async void OnGameDisplayWinner(GameDisplayWinnerPubSubMessage winner)
    {
        string RoundGame = string.Empty;
        if (winner.Round) RoundGame = "Round"; else RoundGame = "Game";
        await JsRuntime.InvokeVoidAsync("alert", $"{winner.Player.Name} won {RoundGame}"); // Alert
        StateHasChanged();
    }
    public void OnRefreshUI(GameTurnRefreshUIMessage msg)
    {
        StateHasChanged();
    }
}
